@page "/product"
@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService


<h3>Lista de Productos</h3>

@if (products != null)
{
    <style>
        .product-table {
            width: 100%;
            border-collapse: collapse;
        }

        .product-table th,
        .product-table td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .product-table th {
            background-color: #f2f2f2;
        }

        .product-table tr:hover {
            background-color: #f5f5f5;
        }

        .product-table .btn-delete {
            padding: 4px 8px;
            background-color: #dc3545;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .product-table .btn-delete:hover {
            background-color: #c82333;
        }
    </style>
    <table class="product-table">
        <thead>
            <tr>
                <th>TÃ­tulo</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
    </thead>
    <tbody>
    @foreach (var product in products)
    {
        <tr>
            <td>@product.Title</td>
            <td>@product.Price</td>
            <td>
                <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
            </td>
        </tr>
    }
    </tbody>
    </table>
}
else
{
    <p>No se encontraron productos.</p>
}
@code
{
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetProducts();
    }
    private async Task<List<Product>> GetProducts()
    {
        return await productService.GetProducts();
    }

    private async Task DeleteProduct(Product product)
    {
        if(!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}" ))
            return;

        await productService.Delete(product.Id);
        toastService.ShowSuccess("Producto eliminado");
        await GetProducts();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}
